#pragma once

#include "Sprite.h"

#include <map>
#include <vector>


//--------------------------------------------------------------------------------------------------------------------------------------------------------------------
//  Renderer::Sprite
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace RenderEngine
{
	class Animated_Sprite : public Sprite
	{
	public:
		//============================================================================================================================================================
		/*	Use the actual constructor for this class */
		Animated_Sprite(const std::shared_ptr<Texture2D> texture,
			const std::string initial_subtexture,
			const std::shared_ptr<Shader_Program> shader_program,
			const glm::vec2& position = glm::vec2(0.0f),
			const glm::vec2& size = glm::vec2(1.0f),
			const float rotation = 0.0f);
		//============================================================================================================================================================

		//============================================================================================================================================================
		virtual void Render() const override; 						/* override Render is sprite class */
		//============================================================================================================================================================



		//============================================================================================================================================================
		void Set_State(const std::string& new_state);				/* Set Animation State */
		void Update(const uint64_t delta);							/* Update Animation State */
		void Insert_State(std::string state,						/*  Initial Animation Statement for sprite */
						  std::vector<std::pair<std::string,	
						  uint64_t>> subtextures_duration); 		
		//============================================================================================================================================================

	private:
		//============================================================================================================================================================
		mutable bool Dirty;
		std::map<std::string, std::vector<std::pair<std::string, uint64_t>>> States_Map;

		size_t Current_Frame;
		uint64_t Current_Animation_Time;

		std::map<std::string, std::vector<std::pair<std::string, uint64_t>>>::const_iterator Current_Animation_Duration;
		//============================================================================================================================================================

	};
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------
